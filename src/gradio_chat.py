import gradio as gr
import json
from typing import Dict, Any
from web_server import process_question
from chat_logger import ChatLogger
import uuid
import os
from datetime import datetime

TRANSLATIONS = {
    "zh": {
        "title": "DevOoopsÊü•ËØ¢Âä©Êâã v1.0",
        "description": "üëã ‰Ω†Â•ΩÔºÅÊàëÊòØ‰Ω†ÁöÑDevOpsÂä©Êâã„ÄÇËØ∑ËæìÂÖ•‰Ω†ÂÖ≥‰∫éÂêÑ‰∏™Domain ServerÁõ∏ÂÖ≥ÈóÆÈ¢òÔºåÊàë‰ºöÂ∏Æ‰Ω†Êü•ËØ¢Âπ∂Ëß£ÈáäÁªìÊûú„ÄÇ\n\n‚ö†Ô∏è Ê≥®ÊÑèÔºöÁõÆÂâç‰ªÖÊîØÊåÅÁÆÄÂçïÁöÑ‰∏ÄÈóÆ‰∏ÄÁ≠îÊ®°ÂºèÔºå‰∏çÊîØÊåÅ‰∏ä‰∏ãÊñáÂÖ≥ËÅîÁöÑÂØπËØù„ÄÇ",
        "language": "ËØ≠Ë®ÄÈÄâÊã©",
        "clear_btn": "Ê∏ÖÁ©∫ÂØπËØù",
        "retry_btn": "ÈáçËØï",
        "loading": "Ê≠£Âú®Êü•ËØ¢‰∏≠...",
        "error": "Êä±Ê≠âÔºåÂ§ÑÁêÜÊÇ®ÁöÑËØ∑Ê±ÇÊó∂Âá∫Áé∞ÈîôËØØ: {}",
        "examples": [
            "How many domains do we have?",
            "Please list all the server IPs and their servergroup running the logserver service in domain dev2.",
            "In dev1, how many servers are running the configportal service? please list all of them",
            "172.16.97.128ÊòØ‰ªÄ‰πàserver",
            "Âú®dev1 domain‰∏≠Ôºå‰∏ÄÂÖ±ÊúâÂ§öÂ∞ë‰∏™serverÊ≠£Âú®ËøêË°åconfigportal service",
            "dev1ÈáåÈù¢ÊúâÂ§öÂ∞ë‰∏™serverËøêË°åLogserverÊúçÂä°ÔºåËØ∑ÂàóÂá∫ip",
        ],
        "sql_section": "ÊâßË°åÁöÑSQLËØ≠Âè•Ôºö",
        "result_section": "Êü•ËØ¢ÁªìÊûúÔºö",
        "summary_section": "ÁªìÊûúËØ¥ÊòéÔºö",
        "placeholder": "Âú®ËøôÈáåËæìÂÖ•‰Ω†ÁöÑÈóÆÈ¢ò..."
    },
    "en": {
        "title": "DevOoops Assistant v1.0",
        "description": "üëã Hi! I'm your DevOps assistant. Please enter your question about domain and server, and I'll help you query and explain the results.\n\n‚ö†Ô∏è Note: Currently only supports simple Q&A mode, context-aware conversations are not supported.",
        "language": "Language",
        "clear_btn": "Clear Chat",
        "retry_btn": "Retry",
        "loading": "Querying...",
        "error": "Sorry, an error occurred: {}",
        "examples": [
            "How many domains do we have?",
            "Please list all the server IPs and their servergroup running the logserver service in domain dev2.",
            "In dev1, how many servers are running the configportal service? please list all of them",
            "172.16.97.128ÊòØ‰ªÄ‰πàserver",
            "Âú®dev1 domain‰∏≠Ôºå‰∏ÄÂÖ±ÊúâÂ§öÂ∞ë‰∏™serverÊ≠£Âú®ËøêË°åconfigportal service",
            "dev1ÈáåÈù¢ÊúâÂ§öÂ∞ë‰∏™serverËøêË°åLogserverÊúçÂä°ÔºåËØ∑ÂàóÂá∫ip",
        ],
        "sql_section": "Executed SQL:",
        "result_section": "Query Results:",
        "summary_section": "Summary:",
        "placeholder": "Type your question here..."
    }
}

class SQLChatBot:
    def __init__(self):
        self.current_lang = "en"
        self.logger = ChatLogger()
        self.conversation_id = str(uuid.uuid4())
    
    def switch_language(self, lang: str) -> Dict[str, str]:
        """Switch interface language and return new interface text"""
        self.current_lang = "zh" if lang == "‰∏≠Êñá" else "en"
        return TRANSLATIONS[self.current_lang]
    
    def process_query(self, message: str, history: list) -> tuple:
        """Process user query and return formatted response"""
        try:
            # ËÆ∞ÂΩïÁî®Êà∑ÈóÆÈ¢ò
            self.logger.add_message(
                conversation_id=self.conversation_id,
                content=message,
                role="user"
            )
            
            # Â§ÑÁêÜÊü•ËØ¢
            start_time = datetime.now().isoformat()
            response = process_question(message, self.current_lang)
            end_time = datetime.now().isoformat()
            
            # ËÆ∞ÂΩïÁ≥ªÁªüÂìçÂ∫î
            self.logger.add_message(
                conversation_id=self.conversation_id,
                content=response,
                role="assistant",
                metadata={
                    "language": self.current_lang,
                    "start_time": start_time,
                    "end_time": end_time,
                    # ‰ªé process_question Ëé∑Âèñ‰∏≠Èó¥ËøáÁ®ãÊï∞ÊçÆ
                    "generated_sql": getattr(response, 'generated_sql', None),
                    "query_results": getattr(response, 'query_results', None),
                    "summary_process": getattr(response, 'metadata', {}).get('summary_process', {}),
                    "status": "success"
                }
            )
            
            # ÊØèÊ¨°ÂØπËØùÂêé‰øùÂ≠òÊó•Âøó
            log_dir = "chat_logs"
            os.makedirs(log_dir, exist_ok=True)
            self.logger.save_to_file(
                self.conversation_id,
                f"{log_dir}/conversation_{self.conversation_id}.json"
            )
            
            history.append((message, response))
            return history, "", history
            
        except Exception as e:
            error_msg = TRANSLATIONS[self.current_lang]["error"].format(str(e))
            
            # ËÆ∞ÂΩïÈîôËØØ
            self.logger.add_message(
                conversation_id=self.conversation_id,
                content=error_msg,
                role="error",
                metadata={
                    "error_type": type(e).__name__,
                    "error_details": str(e),
                    "language": self.current_lang,
                    "status": "error",
                    "timestamp": datetime.now().isoformat()
                }
            )
            
            history.append((message, error_msg))
            return history, "", history

def create_interface():
    """Create and configure the Gradio interface"""
    bot = SQLChatBot()
    
    # Add custom CSS for dark mode and layout
    custom_css = """
    #chatbot {height: 600px} 
    .message {font-size: 15px}
    
    /* Dark mode styles */
    body {
        background-color: #000000 !important;
        color: #ffffff !important;
    }
    .gradio-container {
        # background-color: #000000 !important;
    }
    .chat-message {
        background-color: #1a1a1a !important;
        color: #ffffff !important;
    }
    .chat-message.user {
        background-color: #2a2a2a !important;
    }
    /* Language selector styles */
    .language-selector {
        text-align: right;
        min-width: 180px !important;
    }
    /* Target the form div */
    .language-selector .form.svelte-sfqy0y {
        border: none !important;
        background-color: transparent;
    }
    /* Target the fieldset directly and remove its styling */
    .language-selector fieldset,
    .language-selector .block.svelte-12cmxck {
        border-width: 0 !important;
        padding: 0 !important;
        margin: 0 !important;
        min-width: unset !important;
        overflow: visible !important;
        background: none !important;
    }
    /* Hide the absolute positioned wrap */
    .language-selector fieldset > .wrap.default {
        display: none !important;
    }
    /* Hide the block-info span */
    .language-selector fieldset > span[data-testid="block-info"] {
        display: none !important;
    }
    /* Style the actual radio buttons wrap */
    .language-selector .wrap.svelte-1kzox3m {
        display: flex !important;
        gap: 0.5em !important;
        justify-content: flex-end !important;
        # background-color: var(--bg-dark) !important;
        border: none !important;
    }
    """
    
    with gr.Blocks(css=custom_css) as demo:
        with gr.Row():
            with gr.Column(scale=4):
                title = gr.Markdown(f"# {TRANSLATIONS['en']['title']}")
            with gr.Column(scale=1, elem_classes="language-selector"):
                language_radio = gr.Radio(
                    choices=["English", "‰∏≠Êñá"],
                    value="English",
                    label="",  # Remove the label
                    interactive=True
                )
        
        description = gr.Markdown(TRANSLATIONS['en']['description'])
        
        # Chat interface
        chatbot = gr.Chatbot(
            height=400,
            avatar_images=(
                "https://cdn.jsdelivr.net/gh/twitter/twemoji@latest/assets/svg/1f464.svg",  # Áî®Êà∑Â§¥ÂÉè üë§
                "https://cdn.jsdelivr.net/gh/twitter/twemoji@latest/assets/svg/1f916.svg"   # Êú∫Âô®‰∫∫Â§¥ÂÉè ü§ñ
            )
        )

        msg = gr.Textbox(
            placeholder=TRANSLATIONS['en']['placeholder'],
            show_label=False
        )
        
        # Control buttons
        with gr.Row():
            clear = gr.Button(TRANSLATIONS['en']['clear_btn'])
            submit = gr.Button("Send", variant="primary")
        
        # Example questions (no need to store in variable)
        gr.Examples(
            examples=TRANSLATIONS['en']['examples'],
            inputs=msg
        )

        # Setup chat functionality
        state = gr.State([])

        submit_click = submit.click(
            bot.process_query,
            inputs=[msg, state],
            outputs=[chatbot, msg, state],
            show_progress=True
        )

        msg.submit(
            bot.process_query,
            inputs=[msg, state],
            outputs=[chatbot, msg, state],
            show_progress=True
        )

        clear.click(lambda: ([], "", []), outputs=[chatbot, msg, state])
        
        # Language change handler
        def on_language_change(lang):
            """Handle language change events"""
            trans = bot.switch_language(lang)
            return (
                f"# {trans['title']}",
                trans['description'],
                trans['clear_btn'],
                trans['placeholder']
            )
        
        # Remove examples from outputs
        language_radio.change(
            fn=on_language_change,
            inputs=[language_radio],
            outputs=[
                title,
                description,
                clear,
                msg
            ]
        )
    
    return demo

if __name__ == "__main__":
    demo = create_interface()
    demo.launch(
        server_name="0.0.0.0",
        server_port=5000,
        share=False
    ) 