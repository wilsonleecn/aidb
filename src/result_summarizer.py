#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
from openai import OpenAI

# Set your OpenAI API key:
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def summarize_sql_result(user_question: str, sqls: str, all_results: list) -> str:
    """
    Calls OpenAI to produce a user-friendly summary of multiple SQL statements and their results.
    
    Args:
        user_question (str): The original user question.
        sql_answer (str): The raw SQL answer from OpenAI (could contain multiple statements).
        all_results (list): A list of dicts, where each dict has {"query": <SQL>, "result": <list of rows>}.

    Returns:
        str: A natural-language summary of the results suitable for displaying to the user.
    """

    # 1) Build a text describing the user question, the multi-statement SQL, and each statement's result.
    content_str = f"User question: {user_question}\n\n"
    content_str += f"SQL queries generated by the assistant:\n{sqls}\n\n"
    
    for idx, item in enumerate(all_results, start=1):
        content_str += f"Statement #{idx}:\nSQL Query:\n{item['query']}\nResult:\n{repr(item['result'])}\n\n"


    # We'll feed the above to the model in the user message
    # So the system prompt sets the role, the user prompt includes the question, the query, the results
    messages = [
        {
            "role": "system",
            "content": (
                "You are an AI that produces a concise, user-friendly summary of multiple SQL statements "
                "and their corresponding results. Address the user's question directly in clear, natural language."
            )
        },
        {
            "role": "user",
            "content": content_str
        }
    ]

    # Make the request to OpenAI
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=messages,
        temperature=0.7,
        max_tokens=400)

    # Extract and print the assistant's answer (human readable answer)
    summary_text = response.choices[0].message.content.strip()
    return summary_text
