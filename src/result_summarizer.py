#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
from openai import OpenAI
import hashlib
import base64
from typing import Any, Dict, List
from config_reader import Config

# Initialize the OpenAI client
client = OpenAI(api_key=Config.OPENAI_API_KEY)

class ValueEncryptor:
    def __init__(self):
        self.value_map: Dict[str, Any] = {}
    
    def encrypt_value(self, value: Any) -> str:
        # Convert value to string and create a hash
        value_str = str(value)
        # Create a hash of the value
        hash_obj = hashlib.sha256(value_str.encode('utf-8'))
        # Take first 6 characters of hex digest
        hash_str = hash_obj.hexdigest()[:6]
        # Create a placeholder with a clear format and double quotes
        placeholder = f'VAL_{hash_str}'
        # Store the mapping if it's a new value
        if placeholder not in self.value_map:
            self.value_map[placeholder] = value
        return placeholder
    
    def decrypt_text(self, text: str) -> str:
        # No need to sort as placeholders have fixed format and won't conflict
        result = text
        for placeholder, value in self.value_map.items():
            result = result.replace(placeholder, str(value))
        return result

def encrypt_results(results: List[dict], encryptor: ValueEncryptor) -> List[dict]:
    encrypted_results = []
    for item in results:
        encrypted_item = {
            "query": item["query"],  # Keep SQL query as plain text
            "result": []
        }
        # Encrypt each row in the result
        for row in item["result"]:
            encrypted_row = {}
            for key, value in row.items():
                # Keep the keys as plain text, encrypt only the values
                encrypted_row[key] = encryptor.encrypt_value(value)
            encrypted_item["result"].append(encrypted_row)
        encrypted_results.append(encrypted_item)
    return encrypted_results

def detect_omission(text: str, language: str = "en") -> bool:
    """
    Detect if the summary contains any omission markers.
    Returns True if omissions are detected, False otherwise.
    """
    # Common omission markers in different languages
    omission_markers = {
        "en": [
            "...", "etc", "and more", "and so on", "other", "remaining",
            "similar records", "omitted", "additional", "and others"
        ],
        "zh": [
            "...", "…", "等", "等等", "其他", "其它", "省略", "余下",
            "类似记录", "还有", "剩余", "更多"
        ]
    }
    
    markers = omission_markers.get(language, omission_markers["en"])
    return any(marker in text.lower() for marker in markers)

def summarize_sql_result(user_question: str, sqls: str, all_results: list, language: str = "en") -> str:
    """
    Calls OpenAI to produce a user-friendly summary of multiple SQL statements and their results.
    """
    # Create an encryptor instance
    encryptor = ValueEncryptor()
    
    # Encrypt the results before sending to OpenAI
    encrypted_results = encrypt_results(all_results, encryptor)
    
    # Build content string with encrypted results
    content_str = f"User question: {user_question}\n\n"
    content_str += f"SQL queries generated by the assistant:\n{sqls}\n\n"
    
    for idx, item in enumerate(encrypted_results, start=1):
        content_str += f"Statement #{idx}:\nSQL Query:\n{item['query']}\nResult:\n{repr(item['result'])}\n\n"

    # Prepare the system message based on language
    if language == "zh":
        system_msg = "你是一个人工智能，可以生成多个 SQL 语句的简洁、用户友好的摘要及其相应的结果。用清晰、自然的语言直接回答用户的问题。显示所有result数组数据"
    else:
        system_msg = "You are an AI that produces a concise, user-friendly summary of multiple SQL statements and their corresponding results. Address the user's question directly in clear, natural language. show all result array items. "
        
    # Prepare messages for OpenAI
    messages = [
        {
            "role": "system",
            "content": system_msg
        },
        {
            "role": "user",
            "content": content_str
        }
    ]
    
    # Make the request to OpenAI
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=messages,
        temperature=0.7,
        max_tokens=400)

    # Extract the assistant's answer and check for truncation
    completion = response.choices[0]
    summary_text = completion.message.content.strip()
    was_truncated = completion.finish_reason == "length"
    
    decrypted_summary = encryptor.decrypt_text(summary_text)
    has_omissions = detect_omission(decrypted_summary, language)
    
    # Create a Response object with metadata
    class Response(str):
        pass
        
    response = Response(decrypted_summary)
    response.metadata = {
        "messages": messages,  # 记录发送给 OpenAI 的消息
        "raw_summary": summary_text,  # 加密的摘要
        "decrypted_summary": decrypted_summary,  # 解密后的摘要
        "encrypted_results": encrypted_results,  # 加密后的结果
        "value_map": encryptor.value_map,  # 添加 encryptor 的映射关系
        "model": "gpt-3.5-turbo",
        "temperature": 0.7,
        "max_tokens": 400,
        "was_truncated": was_truncated,
        "has_omissions": has_omissions  # Add omission detection status
    }
    
    return response
